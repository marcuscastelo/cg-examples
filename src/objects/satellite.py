from dataclasses import dataclass
from OpenGL import GL as gl
import numpy as np
from numpy import log

from utils.geometry import Vec2, Vec3
from utils.sig import metsig

from objects.element import Element, ElementSpecification, ShapeSpec
from transformation_matrix import Transform
from shader import Shader, ShaderDB


@dataclass(init=False)
class Satellite(Element):
    rotation_speed: float = 0.0


    @metsig(Element.__init__)
    def __init__(self, *args, **kwargs):
        self._render_primitive = gl.GL_TRIANGLES

        kwargs['specs'] = ElementSpecification(
            initial_transform=Transform(
                translation=Vec3(0, 0, 0),
                rotation=Vec3(0, 0, 0),
                scale=Vec3(1, 1, 1),
            ), # TODO: allow world to set this
            shape_specs=[
                ShapeSpec(
                    vertices=np.array([
                        *( 4.89084832e-02,  1.03903916e-02,  0.00000000e+00), *(0.588, 0.588, 0.588), 
                        * ( 4.56815921e-02,  2.03271322e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 4.04602103e-02,  2.93763764e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 3.34723070e-02,  3.71430293e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 2.50229836e-02,  4.32879925e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 1.54811405e-02,  4.75429744e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 5.26338024e-03,  4.97221984e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-5.18418336e-03,  4.97305170e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-1.54054016e-02,  4.75675687e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-2.49540098e-02,  4.33277898e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-3.34131084e-02,  3.71962897e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-4.04133722e-02,  2.94407774e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-4.56491597e-02,  2.03998610e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-4.88918722e-02,  1.04682725e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-4.99999374e-02,  7.96326494e-05,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-4.89249714e-02, -1.03124846e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-4.57139052e-02, -2.02543512e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-4.05069441e-02, -2.93118991e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-3.35314199e-02, -3.70896719e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-2.50918958e-02, -4.32480834e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-1.55568402e-02, -4.75182571e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * (-5.34256361e-03, -4.97137494e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 5.10497298e-03, -4.97387089e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 1.53296236e-02, -4.75920439e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 2.48849727e-02, -4.33674790e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 3.33538279e-02, -3.72494608e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 4.03664298e-02, -2.95051057e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 4.56166118e-02, -2.04725377e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 4.88751382e-02, -1.05461273e-02,  0.00000000e+00), *(0.588, 0.588, 0.588),
                        * ( 4.99997474e-02, -1.59265095e-04,  0.00000000e+00), *(0.588, 0.588, 0.588),

                    ], dtype=np.float32),
                    shader=ShaderDB.get_instance().get_shader('colored'),
                    render_mode=gl.GL_TRIANGLE_FAN,
                ), 
                ShapeSpec(
                    vertices=np.array([
                        *(-0.051, 0.01, 0.0),        *(0.290, 0.290, 0.290),
                        *(-0.08, -0.01, 0.0),       *(0.290, 0.290, 0.290),
                        *(-0.08, 0.01, 0.0),        *(0.290, 0.290, 0.290),

                        *(-0.08, -0.01, 0.0),       *(0.290, 0.290, 0.290),
                        *(-0.051, 0.01, 0.0),        *(0.290, 0.290, 0.290),
                        *(-0.051, -0.01, 0.0),       *(0.290, 0.290, 0.290),
             
                        *(-0.08, 0.02, 0.0),        *(0.588, 0.588, 0.588),
                        *(-0.1, -0.02, 0.0),        *(0.588, 0.588, 0.588),
                        *(-0.1, 0.02, 0.0),         *(0.588, 0.588, 0.588),
             
                        *(-0.08, 0.02, 0.0),        *(0.588, 0.588, 0.588),
                        *(-0.08, -0.02, 0.0),       *(0.588, 0.588, 0.588),
                        *(-0.1, -0.02, 0.0),        *(0.588, 0.588, 0.588),

                        ##

                        *(0.051, 0.01, 0.0),     *(0.290, 0.290, 0.290),
                        *(0.08, -0.01, 0.0),    *(0.290, 0.290, 0.290),
                        *(0.08, 0.01, 0.0),     *(0.290, 0.290, 0.290),
            
                        *(0.08, -0.01, 0.0),    *(0.290, 0.290, 0.290),
                        *(0.051, 0.01, 0.0),     *(0.290, 0.290, 0.290),
                        *(0.051, -0.01, 0.0),    *(0.290, 0.290, 0.290),
            
                        *(0.08, 0.02, 0.0),     *(0.588, 0.588, 0.588),
                        *(0.1, -0.02, 0.0),     *(0.588, 0.588, 0.588),
                        *(0.1, 0.02, 0.0),      *(0.588, 0.588, 0.588),
            
                        *(0.08, 0.02, 0.0),     *(0.588, 0.588, 0.588),
                        *(0.08, -0.02, 0.0),     *(0.588, 0.588, 0.588),
                        *(0.1, -0.02, 0.0),     *(0.588, 0.588, 0.588),
                     
                    ], dtype=np.float32),
                    render_mode=gl.GL_TRIANGLES,
                     shader=ShaderDB.get_instance().get_shader('colored'),
                )
            ]
        )

        super().__init__(*args, **kwargs)

    def _physics_update(self, delta_time: float):
        self.rotate(self.rotation_speed)
